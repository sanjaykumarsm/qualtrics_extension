#!/usr/bin/env groovy

def setCommitStatus(status) {
    try {
        updateGitlabCommitStatus name: "${JOB_NAME}", state: "${status}"
    } catch (error) {
        // In case the above fails we don't want to stop post actions
        echo error
    }
}

def isDeploymentBranch() {
    return env.gitlabSourceBranch in ['master']
}

def publishTestResults() {
    def unitTestResultsPath = "test_results/junit.xml"
    def unitTestResultsExists = fileExists "${unitTestResultsPath}"
    def codeCoveragePath = "coverage/cobertura-coverage.xml"
    def codeCoverageExists = fileExists "${codeCoveragePath}"

    if(!unitTestResultsExists) {
        currentBuild.result = 'FAILURE'
        echo "Was not able to find unit test result artifacts"
        return
    }

    if(!codeCoverageExists) {
        currentBuild.result = 'FAILURE'
        echo "Was not able to find code coverage artifacts"
        return
    }

    def unitTestGUID = "1d15e1dc-f156-45a2-966e-89dba1797e68"

    sh script: """
        TRS_UNIT_REPORT_RESULTS="${unitTestResultsPath}" \
        TRS_UNIT_REPORT_TYPE="JUNIT" \
        TRS_UNIT_COVERAGE_RESULTS="${codeCoveragePath}" \
        TRS_UNIT_COVERAGE_TYPE=COBERTURA \
        TRS_TEAM_TAG="appsdk" \
        TRS_SERVICE_TAG="qualtrics-plugin-ui-react" \
        TRS_LANGUAGE_TAG="javascript" \
        TRS_CONFIG_ID="${unitTestGUID}" \
        ./bee --report-test-results
    """
}

pipeline {
    agent {label 'nomad-builder'}

    environment {
        DOCKER_HOST = 'tcp://127.0.0.1:2375'
        BEE_ABSOLUTE_ROOT_PATH = "/var/lib/nomad/alloc/${NOMAD_ALLOC_ID}/${NOMAD_TASK_NAME}"
        BEE_HOST_CACHE_PATH = "/cache/${JOB_NAME}"
        SLACK_CHANNEL = "#appsdk-deploys"
        INT_NPM_TOKEN = 'abc123'
        DOCKER_ENVIRONMENT = " -e 'INT_NPM_TOKEN=${INT_NPM_TOKEN}'"
    }

    stages {
        stage('Info') {
            steps {
                sh script: 'hostname'
                sh script: 'env'
                sh script: 'uname'
                sh script: 'whoami'
            }
        }

        stage('Test') {
            steps {
                sh script: './bee run trs-deps'
                sh script: './bee run test:trs'
            }
        }

        stage('TRS') {
            when {
                expression{ isDeploymentBranch() }
            }
            steps {
                publishTestResults()
            }
        }
    }

    post {
        success {
            setCommitStatus('success')
            slackSend color: "good", message: "Build of $JOB_BASE_NAME succeeded ($GIT_BRANCH): $BUILD_URL", channel: "$SLACK_CHANNEL"
        }

        failure {
            setCommitStatus('failed')
            slackSend color: "danger", message: "Build of $JOB_BASE_NAME failed ($GIT_BRANCH): $BUILD_URL", channel: "$SLACK_CHANNEL"
        }

        unstable {
            setCommitStatus('failed')
            slackSend color: "warn", message: "Build of $JOB_BASE_NAME unstable ($GIT_BRANCH): $BUILD_URL", channel: "$SLACK_CHANNEL"
        }

        aborted {
            setCommitStatus('canceled')
            slackSend color: "warn", message: "Build of $JOB_BASE_NAME aborted ($GIT_BRANCH): $BUILD_URL", channel: "$SLACK_CHANNEL"
        }
    }
}